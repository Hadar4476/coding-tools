First a require must be made:

=> const http = require("http");

Then I need to start the method createServer like this:

=> const server = http.createServer();

This method will take an anonymous function with 2 parameters:

=> const server = http.createServer((req,res)=>{});

"req" parameter stand for request, this paramter is responsible for 
the option that a request is going to enter to my NodeJS server, I can get
that request details with the "req" paramter, such as like:
- what did the user actually wants?
- which browser the user is using?
- what is the user IP?
- what operating system is the user using?


"res" parameter stands for response,
now if I will want to send the user a response I can use the "res" parameter.
after createServer is running I can get all the response abilities of NodeJS.

for example I can send:
- some text
- some html
- etc

usually when the user wants some response back he sand a request to some URL:
- homepage
- about
- contact
- etc
I can decide what to give to the user depend on the URL he requested.
for example if user wants the end-point of "/":

  const server = http.createServer((req,res)=>{
  => if(req.url == "/"){
  
  }
  });
  
I want to return the following response(res);

  const server = http.createServer((req,res)=>{
  if(req.url == "/"){
  => res.writeHead(200, {"Content-Type": "text/plain"});
  => res.write("Hello World");
  }
  });
  
* res.writeHead(200, {"Content-Type": "text/plain"})?

I can send a response to the header which the browser will recieve and telling it 
that the status is 200 - means that its alright for requesting that URL.

* res.write("Hello World");

I also want to send some text/message to the browser/user "Hello Write".

Now I want NodeJS to listen to this request so it can give it a response.
I can do this with typing:

=> server.listen(3000);

the reason why I want NodeJS to listen to port 3000 in http(port:80) is because
in real servers the operating systems don't recognize as a web server. the http request
that was sent from the browser I need to make a reference to that request in NodeJS,
NodeJS can't listen to port 80 because the http request is already listening to that,
we need to make NodeJS listening to other port, like: 3000.

In this stage if I go on and type "localhost:3000" so I can reach my app,
nothing will display because I need to run this app with "node app" in NodeJS.

afterwards I can see in the cmd/terminal that the thread didn't stop, its still running!
also going back to localhost:3000 the page is always in loading state = stuck(hangup).
for browser side to understand that I want to display "Hello World" and actually making it
stop waiting and responding, I need to add:

 => res.end();
 
means "we are done here" - to the browser: "don't expect for nothing else thats it".

after adding the code which looks like this:

  const server = http.createServer((req,res)=>{
  if(req.url == "/"){
    res.writeHead(200, {"Content-Type": "text/plain"});
    res.write("Hello World");
 => res.end();
  }
  });
  
  server.listen(3000);
  
I need to restart the app in the cmd/terminal,
because I also want to restart the server's processor with the new changes
so it can start a new thread!

to actually getting some indication that NodeJS is listening to port 3000 I can add
an anonymous function to server.listen() and log that NodeJS is currently listening to that port.

  server.listen(3000,()=>{
=> console.log("server start at port 3000")
  });




